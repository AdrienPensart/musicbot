module default {
    # global current_user := (
    #     assert_single((
    #         select User { id, name }
    #         filter .identity = global ext::auth::ClientTokenIdentity
    #     ))
    # );

    # type User {
    #     required name: str;
    #     required identity: ext::auth::Identity;
    # }

    # alias MATCH_ALL := "(.*?)";

    function bytes_to_human(
        size: int64,
        k: int64 = 1000,
        decimals: int64 = 2,
        units: array<str> = [' B', ' KB', ' MB', ' GB', ' TB', ' PB', ' EB', ' ZB', ' YB'],
    ) -> str {
        using (
            select '0' ++ units[0] if size = 0
            else (
                with i := <int64>math::floor(math::ln(math::abs(size)) / math::ln(k))
                select to_str(std::round(<decimal>(size / k ^ i), decimals)) ++ units[i]
            )
        );
        annotation title := "Convert a byte size to human readable string";
    };

    scalar type Rating extending float64 {
        constraint one_of (0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0);
    }

    scalar type Size extending int64 {
        constraint min_value(0);
    }

    scalar type Length extending int64 {
        constraint min_value(0);
    }

    scalar type Track extending int64;

    scalar type `Limit` extending int64 {
        constraint min_value(0);
    }

    type Artist {
        # required user: User;
        required name: str;
        required created_at: datetime {
            default := std::datetime_current();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement())
        }
        multi link albums := .<artist[is Album];
        property n_albums := (select count(.albums));

        link musics := (select .albums.musics);
        property n_musics := (select count(.musics));
        property length := (select sum(.musics.length));
        property rating := (select <float64>round(<decimal>math::mean(.musics.rating ?? {0.0}), 2));
        property all_genres := (select to_str(array_agg(.musics.genre.name), " "));

        link keywords := (select .musics.keywords);
        property all_keywords := (select to_str(array_agg((select Artist.keywords.name order by Artist.keywords.name)), " "));

        link genres := (select .musics.genre);
        property n_genres := (select count(.genres));

        property size := (select sum(.musics.size));
        property human_size := (select bytes_to_human(.size));

        property duration := (select to_duration(seconds := <float64>.length));
        property human_duration := (select to_str(.duration, "HH24:MI:SS"));

        constraint exclusive on ((.name));

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng,
           )
        );

    }

    type Album {
        # required user: User;
        required name: str;
        property title := (select .artist.name ++ " - " ++ .name);
        required created_at: datetime {
            default := std::datetime_current();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement())
        }

        required link artist: Artist {
            on target delete delete source;
        }

        multi link musics := .<album[is Music];
        property n_musics := (select count(.musics));
        property rating := (select <float64>round(<decimal>math::mean(.musics.rating ?? {0.0}), 2));
        property length := (select sum(.musics.length));

        property duration := (select to_duration(seconds := <float64>.length));
        property human_duration := (select to_str(.duration, "HH24:MI:SS"));

        property size := (select sum(.musics.size));
        property human_size := (select bytes_to_human(.size));

        link keywords := (select .musics.keywords);
        property all_keywords := (select to_str(array_agg((select Artist.keywords.name order by Artist.keywords.name)), " "));

        link genres := (select .musics.genre);
        property n_genres := (select count(.genres));
        property all_genres := (select to_str(array_agg(.musics.genre.name), " "));

        constraint exclusive on ((.name, .artist));

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng
           )
        );
    }

    type Folder {
        # required user: User;
        required name: str;
        required username: str;
        required created_at: datetime {
            default := std::datetime_current();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement())
        }

        required ipv4: str;

        multi link musics := .<folders[is Music];
        property n_musics := (select count(.musics));
        property length := (select sum(.musics.length));

        link keywords := (select .musics.keywords);
        property n_keywords := (select count(.keywords));
        property all_keywords := (select to_str(array_agg((select Artist.keywords.name order by Artist.keywords.name)), " "));

        property duration := (select to_duration(seconds := <float64>.length));
        property human_duration := (select to_str(.duration, "HH24:MI:SS"));

        property size := (select sum(.musics.size));
        property human_size := (select bytes_to_human(.size));

        link artists := (select .musics.artist);
        property n_artists := (select count(.artists));
        property all_artists := (select to_str(array_agg(.musics.artist.name), " "));

        link albums := (select .musics.album);
        property n_albums := (select count(.albums));

        link genres := (select .musics.genre);
        property n_genres := (select count(.genres));
        property all_genres := (select to_str(array_agg(.musics.genre.name), " "));

        constraint exclusive on ((.name, .username, .ipv4));

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng,
           )
        );
    }

    # define a local music
    type Music {
        # required user: User;
        required name: str;
        property title := (select .album.title ++ " - " ++ .name);
        required created_at: datetime {
            default := std::datetime_current();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement())
        }

        required rating: Rating {
            default := 0.0
        }
        required length: Length;
        track: Track;

        property duration := (select to_duration(seconds := <float64>.length));
        property human_duration := (select to_str(.duration, "HH24:MI:SS"));

        required size: Size;
        property human_size := (select bytes_to_human(.size));

        required link album: Album {
            on target delete delete source;
        }
        link artist := (select .album.artist);

        required link genre: Genre;

        # youtube: str;
        # spotify: str;

        multi keywords: Keyword;
        required multi folders: Folder {
            path: str;
        }
        property paths := (select .folders@path);

        constraint exclusive on ((.name, .album));

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng,
           )
        );
    }

    type Keyword {
        # required user: User;
        required name: str;
        required created_at: datetime {
            default := std::datetime_current();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement())
        }

        multi link musics := .<keywords[is Music];
        property n_musics := (select count(.musics));
        property length := (select sum(.musics.length));
        property rating := (select <float64>round(<decimal>math::mean(.musics.rating ?? {0.0}), 2));

        link artists := (select .musics.artist);
        property n_artists := (select count(.artists));
        property all_artists := (select to_str(array_agg(.musics.artist.name), " "));

        link albums := (select .musics.album);
        property n_albums := (select count(.albums));

        property duration := (select to_duration(seconds := <float64>.length));
        property human_duration := (select to_str(.duration, "HH24:MI:SS"));

        property size := (select sum(.musics.size));
        property human_size := (select bytes_to_human(.size));

        constraint exclusive on ((.name));

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng,
           )
        );
    }

    type Genre {
        # required user: User;
        required name: str;
        required created_at: datetime {
            default := std::datetime_current();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement())
        }

        multi link musics := .<genre[is Music];
        property n_musics := (select count(.musics));
        property rating := (select <float64>round(<decimal>math::mean(.musics.rating ?? {0.0}), 2));

        link artists := (select .musics.artist);
        property n_artists := (select count(.artists));
        property all_artists := (select to_str(array_agg(.musics.artist.name), " "));

        link albums := (select .musics.album);
        property n_albums := (select count(.albums));

        link keywords := (select .musics.keywords);
        property length := (select sum(.musics.length));

        property duration := (select to_duration(seconds := <float64>.length));
        property human_duration := (select to_str(.duration, "HH24:MI:SS"));

        property size := (select sum(.musics.size));
        property human_size := (select bytes_to_human(.size));

        constraint exclusive on ((.name));

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng,
           )
        );
    }

    type Playlist {
        required name: str;
        multi musics: Music;

        index fts::index on (
           fts::with_options(
              .name,
              language := fts::Language.eng,
           )
        );
    }

    function gen_playlist(
        named only min_length: Length = 0,
        named only max_length: Length = 2147483647,
        named only min_size: Size = 0,
        named only max_size: Size = 2147483647,
        named only min_rating: Rating = 0.0,
        named only max_rating: Rating = 5.0,
        named only artist: str = "(.*?)",
        named only album: str = "(.*?)",
        named only genre: str = "(.*?)",
        named only title: str = "(.*?)",
        named only keyword: str = "(.*?)",
        named only `limit`: `Limit` = 2147483647,
        named only pattern: str = "",
    ) -> set of Music {
        using (
            select Music
            filter
                .length >= min_length and .length <= max_length
                and .size >= min_size and .size <= max_size
                and .rating >= min_rating and .rating <= max_rating
                and re_test(artist, .artist.name)
                and re_test(album, .album.name)
                and re_test(genre, .genre.name)
                and re_test(title, .name)
                and re_test(keyword, array_join(array_agg((select .keywords.name)), " "))
                and (pattern = "" or ext::pg_trgm::word_similar(pattern, .title))
            order by
                .artist.name then
                .album.name then
                .track then
                .name
            limit `limit`
        );
        annotation title := "Generate a playlist from parameters";
    };
    
    function upsert_folder(
        named only folder: str,
        named only username: str,
        named only ipv4: str,
    ) -> Folder {
        using (
            select (
                insert Folder {
                    name := folder,
                    username := username,
                    ipv4 := ipv4
                }
                unless conflict on (.name, .username, .ipv4) else (select Folder)
            )
        );
        annotation title := "Create a new folder";
    };

    function upsert_genre(
        named only genre: str
    ) -> Genre {
        using (
            select (
                insert Genre {
                    name := genre
                }
                unless conflict on (.name) else (select Genre)
            )
        );
        annotation title := "Create a new genre";
    };

    function upsert_artist(
        named only artist: str
    ) -> Artist {
        using (
            select (
                insert Artist {
                    name := artist
                }
                unless conflict on (.name) else (select Artist)
            )
        );
        annotation title := "Create a new artist";
    };

    function remove_musics_path(
        named only path: str
    ) -> set of Music {
        using (
            update Music
            filter contains(.paths, path)
            set {folders := (select .folders filter @path != path)}
        );
        annotation title := "Remove path from musics";
    };

    function upsert_album(
        named only artist: Artist,
        named only album: str
    ) -> Album {
        using (
            select (
                insert Album {
                    name := album,
                    artist := artist
                }
                unless conflict on (.name, .artist) else (select Album)
            )
        );
        annotation title := "Create a new album";
    };

    function upsert_keyword(
        named only keyword: str
    ) -> Keyword {
        using (
            select (
                insert Keyword {
                    name := keyword
                }
                unless conflict on (.name) else (select Keyword)
            )
        );
        annotation title := "Create a new keyword";
    };

    function upsert_music(
        named only title: str,
        named only size: Size,
        named only length: Length,
        named only genre: Genre,
        named only album: Album,
        named only keywords: array<uuid>,
        named only track: optional Track,
        named only rating: Rating,
        named only folder: Folder,
        named only path: str
    ) -> Music {
        using (
            select (
                insert Music {
                    name := title,
                    size := size,
                    length := length,
                    genre := genre,
                    album := album,
                    keywords := assert_distinct((select array_unpack(<array<Keyword>>keywords))),
                    track := track,
                    rating := rating,
                    folders := (
                        select folder {
                            @path := path
                        }
                    )
                }
                unless conflict on (.name, .album) else (
                    update Music
                    set {
                        size := size,
                        genre := genre,
                        album := album,
                        keywords := assert_distinct((select array_unpack(<array<Keyword>>keywords))),
                        length := length,
                        track := track,
                        rating := rating,
                        folders += (
                            select folder {
                                @path := path
                            }
                        )
                    }
                )
            )
        );
        annotation title := "Create a new music";
    };

    function gen_bests(
        named only min_length: Length = 0,
        named only max_length: Length = 2147483647,
        named only min_size: Size = 0,
        named only max_size: Size = 2147483647,
        named only min_rating: Rating = 0.0,
        named only max_rating: Rating = 5.0,
        named only artist: str = "(.*?)",
        named only album: str = "(.*?)",
        named only genre: str = "(.*?)",
        named only title: str = "(.*?)",
        named only keyword: str = "(.*?)",
        named only `limit`: `Limit` = 2147483647,
        named only pattern: str = "",
    ) -> json {
        using (
            with
                musics := (select gen_playlist(
                    min_length := min_length,
                    max_length := max_length,
                    min_size := min_size,
                    max_size := max_size,
                    min_rating := min_rating,
                    max_rating := max_rating,
                    artist := artist,
                    album := album,
                    genre := genre,
                    title := title,
                    keyword := keyword,
                    pattern := pattern,
                    `limit` := `limit`,
                )),
                unique_keywords := (select distinct (for music in musics union (music.keywords)))
            select <json>{
                genres := (
                    group musics {
                        name,
                        size,
                        genre: {name},
                        album: {name},
                        artist: {name},
                        keywords: {name},
                        length,
                        track,
                        rating,
                        folders: {
                            name,
                            ipv4,
                            username,
                            path := @path
                        }
                    }
                    by .genre
                ),
                keywords := (
                    for unique_keyword in unique_keywords
                    union (
                        select Keyword {
                            name,
                            musics := (
                                select distinct musics {
                                    name,
                                    size,
                                    genre: {name},
                                    album: {name},
                                    artist: {name},
                                    keywords: {name},
                                    length,
                                    track,
                                    rating,
                                    folders: {
                                        name,
                                        ipv4,
                                        username,
                                        path := @path
                                    }
                                }
                                filter unique_keyword.name in .keywords.name
                            )
                        }
                        filter .name = unique_keyword.name
                    )
                ),
                ratings := (
                    group musics {
                        name,
                        size,
                        genre: {name},
                        album: {name},
                        artist: {name},
                        keywords: {name},
                        length,
                        track,
                        rating,
                        folders: {
                            name,
                            ipv4,
                            username,
                            path := @path
                        }
                    }
                    by .rating
                ),
                keywords_for_artist := (
                    for artist in (select distinct musics.artist)
                    union (
                        select {
                            artist := artist.name,
                            keywords := (
                                with
                                artist_musics := (select musics filter .artist = artist),
                                artist_keywords := (select distinct (for music in artist_musics union (music.keywords)))
                                for artist_keyword in (select artist_keywords)
                                union (
                                    select {
                                        keyword := artist_keyword.name,
                                        musics := (
                                            select distinct artist_musics {
                                                name,
                                                size,
                                                genre: {name},
                                                album: {name},
                                                artist: {name},
                                                keywords: {name},
                                                length,
                                                track,
                                                rating,
                                                folders: {
                                                    name,
                                                    ipv4,
                                                    username,
                                                    path := @path
                                                }
                                            }
                                            filter artist_keyword in .keywords
                                        )
                                    }
                                )
                            )
                        }
                    )
                ),
                ratings_for_artist := (
                    group musics {
                        name,
                        size,
                        genre: {name},
                        album: {name},
                        artist: {name},
                        keywords: {name},
                        length,
                        track,
                        rating,
                        folders: {
                            name,
                            ipv4,
                            username,
                            path := @path
                        }
                    }
                    by .artist, .rating
                )
    });
        annotation title := "Generate a playlist from parameters";
    };
}

using extension graphql;
using extension edgeql_http;
using extension pg_trgm;
# using extension auth;

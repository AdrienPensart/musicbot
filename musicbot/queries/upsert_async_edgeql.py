# AUTOGENERATED FROM 'musicbot/queries/upsert.edgeql' WITH:
#     $ edgedb-py -I musicbot-prod --dir musicbot/queries


from __future__ import annotations

import dataclasses
import uuid

import edgedb

Length = int
Length02 = int
Rating = float
Rating02 = float
Size = int
Size02 = int
Track = int
Track02 = int


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpsertResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    size: Size
    genre: UpsertResultGenre
    album: UpsertResultAlbum
    artist: UpsertResultArtist
    keywords: list[UpsertResultKeywordsItem]
    length: Length
    track: Track | None
    rating: Rating
    folders: list[UpsertResultFoldersItem]


@dataclasses.dataclass
class UpsertResultAlbum(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertResultArtist(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertResultFoldersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    ipv4: str
    username: str
    path: str | None


@dataclasses.dataclass
class UpsertResultGenre(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertResultKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def upsert(
    executor: edgedb.AsyncIOExecutor,
    *,
    artist: str,
    album: str,
    genre: str,
    keywords: list[str],
    folder: str,
    username: str,
    ipv4: str,
    title: str,
    size: Size02,
    length: Length02,
    track: Track02 | None,
    rating: Rating02,
    path: str,
) -> UpsertResult:
    return await executor.query_single(
        """\
        with
            upsert_artist :=
            (
                insert Artist {
                    name := <str>$artist
                }
                unless conflict
            ),
            my_artist := assert_single((select Artist filter .name = <str>$artist)),
            upsert_album :=
            (
                insert Album {
                    name := <str>$album,
                    artist := upsert_artist
                }
                unless conflict
            ),
            my_album := assert_single((select Album filter .name = <str>$album and .artist.name = <str>$artist)),
            upsert_genre :=
            (
                insert Genre {
                    name := <str>$genre
                }
                unless conflict
            ),
            my_genre := assert_single((select Genre filter .name = <str>$genre)),
            upsert_keywords :=
            (
                for keyword in { array_unpack(<array<str>>$keywords) }
                insert Keyword {
                    name := keyword
                }
                unless conflict on (.name)
                else (select Keyword)
            ),
            upsert_folder :=
            (
                insert Folder {
                    name := <str>$folder,
                    username := <str>$username,
                    ipv4 := <str>$ipv4
                }
                unless conflict
            ),
            folder := assert_single((select Folder filter .name = <str>$folder and .username = <str>$username and .ipv4 = <str>$ipv4)),
            music := (
                insert Music {
                    name := <str>$title,
                    size := <Size>$size,
                    length := <Length>$length,
                    genre := my_genre,
                    album := my_album,
                    keywords := upsert_keywords,
                    track := <optional Track>$track,
                    rating := <Rating>$rating,
                    folders := (
                        select upsert_folder {
                            @path := <str>$path
                        }
                    )
                }
                unless conflict on (.name, .album)
                else (
                    update Music
                    set {
                        size := <Size>$size,
                        genre := my_genre,
                        album := my_album,
                        keywords := upsert_keywords,
                        length := <Length>$length,
                        track := <optional Track>$track,
                        rating := <Rating>$rating,
                        folders += (
                            select upsert_folder {
                                @path := <str>$path
                            }
                        )
                    }
                )
            ),
            select music {
                name,
                size,
                genre: {name},
                album: {name},
                artist: {name},
                keywords: {name},
                length,
                track,
                rating,
                folders: {
                    name,
                    ipv4,
                    username,
                    path := @path
                }
        }\
        """,
        artist=artist,
        album=album,
        genre=genre,
        keywords=keywords,
        folder=folder,
        username=username,
        ipv4=ipv4,
        title=title,
        size=size,
        length=length,
        track=track,
        rating=rating,
        path=path,
    )

# AUTOGENERATED FROM 'musicbot/queries/gen_bests.edgeql' WITH:
#     $ edgedb-py -I musicbot-prod --dir musicbot/queries


from __future__ import annotations

import dataclasses
import uuid

import edgedb

Length = int
Length02 = int
Limit = int
Rating = float
Rating02 = float
Size = int
Size02 = int
Track = int


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GenBestsResult(NoPydanticValidation):
    id: uuid.UUID
    genres: list[GenBestsResultGenresItem]
    keywords: list[GenBestsResultKeywordsItem]
    ratings: list[GenBestsResultRatingsItem]
    keywords_for_artist: list[GenBestsResultKeywordsForArtistItem]
    ratings_for_artist: list[GenBestsResultRatingsForArtistItem]


@dataclasses.dataclass
class GenBestsResultGenresItem(NoPydanticValidation):
    id: uuid.UUID
    key: GenBestsResultGenresItemKey
    grouping: list[str]
    elements: list[GenBestsResultGenresItemElementsItem]


@dataclasses.dataclass
class GenBestsResultGenresItemElementsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    size: Size
    genre: GenBestsResultGenresItemKeyGenre
    album: GenBestsResultGenresItemElementsItemAlbum
    artist: GenBestsResultGenresItemElementsItemArtist
    keywords: list[GenBestsResultGenresItemElementsItemKeywordsItem]
    length: Length
    track: Track | None
    rating: Rating
    folders: list[GenBestsResultGenresItemElementsItemFoldersItem]


@dataclasses.dataclass
class GenBestsResultGenresItemElementsItemAlbum(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenBestsResultGenresItemElementsItemArtist(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenBestsResultGenresItemElementsItemFoldersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    ipv4: str
    username: str
    path: str | None


@dataclasses.dataclass
class GenBestsResultGenresItemElementsItemKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenBestsResultGenresItemKey(NoPydanticValidation):
    id: uuid.UUID
    genre: GenBestsResultGenresItemKeyGenre


@dataclasses.dataclass
class GenBestsResultGenresItemKeyGenre(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenBestsResultKeywordsForArtistItem(NoPydanticValidation):
    id: uuid.UUID
    artist: str
    keywords: list[GenBestsResultKeywordsForArtistItemKeywordsItem]


@dataclasses.dataclass
class GenBestsResultKeywordsForArtistItemKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    keyword: str
    musics: list[GenBestsResultGenresItemElementsItem]


@dataclasses.dataclass
class GenBestsResultKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    musics: list[GenBestsResultGenresItemElementsItem]


@dataclasses.dataclass
class GenBestsResultRatingsForArtistItem(NoPydanticValidation):
    id: uuid.UUID
    key: GenBestsResultRatingsForArtistItemKey
    grouping: list[str]
    elements: list[GenBestsResultGenresItemElementsItem]


@dataclasses.dataclass
class GenBestsResultRatingsForArtistItemKey(NoPydanticValidation):
    id: uuid.UUID
    artist: GenBestsResultGenresItemElementsItemArtist
    rating: Rating


@dataclasses.dataclass
class GenBestsResultRatingsItem(NoPydanticValidation):
    id: uuid.UUID
    key: GenBestsResultRatingsItemKey
    grouping: list[str]
    elements: list[GenBestsResultGenresItemElementsItem]


@dataclasses.dataclass
class GenBestsResultRatingsItemKey(NoPydanticValidation):
    id: uuid.UUID
    rating: Rating


async def gen_bests(
    executor: edgedb.AsyncIOExecutor,
    *,
    min_length: Length02,
    max_length: Length02,
    min_size: Size02,
    max_size: Size02,
    min_rating: Rating02,
    max_rating: Rating02,
    artist: str,
    album: str,
    genre: str,
    title: str,
    keyword: str,
    pattern: str,
    limit: Limit,
) -> GenBestsResult:
    return await executor.query_single(
        """\
        with
            musics := (select gen_playlist(
                min_length := <Length>$min_length,
                max_length := <Length>$max_length,
                min_size := <Size>$min_size,
                max_size := <Size>$max_size,
                min_rating := <Rating>$min_rating,
                max_rating := <Rating>$max_rating,
                artist := <str>$artist,
                album := <str>$album,
                genre := <str>$genre,
                title := <str>$title,
                keyword := <str>$keyword,
                pattern := <str>$pattern,
                `limit` := <`Limit`>$limit,
            )),
            unique_keywords := (select distinct (for music in musics union (music.keywords)))
        select {
            genres := (
                group musics {
                    name,
                    size,
                    genre: {name},
                    album: {name},
                    artist: {name},
                    keywords: {name},
                    length,
                    track,
                    rating,
                    folders: {
                        name,
                        ipv4,
                        username,
                        path := @path
                    }
                }
                by .genre
            ),
            keywords := (
                for unique_keyword in unique_keywords
                union (
                    select Keyword {
                        name,
                        musics := (
                            select distinct musics {
                                name,
                                size,
                                genre: {name},
                                album: {name},
                                artist: {name},
                                keywords: {name},
                                length,
                                track,
                                rating,
                                folders: {
                                    name,
                                    ipv4,
                                    username,
                                    path := @path
                                }
                            }
                            filter unique_keyword.name in .keywords.name
                        )
                    }
                    filter .name = unique_keyword.name
                )
            ),
            ratings := (
                group musics {
                    name,
                    size,
                    genre: {name},
                    album: {name},
                    artist: {name},
                    keywords: {name},
                    length,
                    track,
                    rating,
                    folders: {
                        name,
                        ipv4,
                        username,
                        path := @path
                    }
                }
                by .rating
            ),
            keywords_for_artist := (
                for artist in (select distinct musics.artist)
                union (
                    select {
                        artist := artist.name,
                        keywords := (
                            with
                            artist_musics := (select musics filter .artist = artist),
                            artist_keywords := (select distinct (for music in artist_musics union (music.keywords)))
                            for artist_keyword in (select artist_keywords)
                            union (
                                select {
                                    keyword := artist_keyword.name,
                                    musics := (
                                        select distinct artist_musics {
                                            name,
                                            size,
                                            genre: {name},
                                            album: {name},
                                            artist: {name},
                                            keywords: {name},
                                            length,
                                            track,
                                            rating,
                                            folders: {
                                                name,
                                                ipv4,
                                                username,
                                                path := @path
                                            }
                                        }
                                        filter artist_keyword in .keywords
                                    )
                                }
                            )
                        )
                    }
                )
            ),
            ratings_for_artist := (
                group musics {
                    name,
                    size,
                    genre: {name},
                    album: {name},
                    artist: {name},
                    keywords: {name},
                    length,
                    track,
                    rating,
                    folders: {
                        name,
                        ipv4,
                        username,
                        path := @path
                    }
                }
                by .artist, .rating
            )
        }\
        """,
        min_length=min_length,
        max_length=max_length,
        min_size=min_size,
        max_size=max_size,
        min_rating=min_rating,
        max_rating=max_rating,
        artist=artist,
        album=album,
        genre=genre,
        title=title,
        keyword=keyword,
        pattern=pattern,
        limit=limit,
    )

# AUTOGENERATED FROM 'musicbot/queries/upsert_music.edgeql' WITH:
#     $ gel-py --dir musicbot/queries -I musicbot-test


from __future__ import annotations

import dataclasses
import uuid

import gel

Length = int
Length02 = int
Rating = float
Rating02 = float
Size = int
Size02 = int
Track = int
Track02 = int


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpsertMusicResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    size: Size
    genre: UpsertMusicResultGenre
    album: UpsertMusicResultAlbum
    artist: UpsertMusicResultArtist
    keywords: list[UpsertMusicResultKeywordsItem]
    length: Length
    track: Track | None
    rating: Rating
    folders: list[UpsertMusicResultFoldersItem]


@dataclasses.dataclass
class UpsertMusicResultAlbum(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertMusicResultArtist(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertMusicResultFoldersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    ipv4: str
    username: str
    path: str | None


@dataclasses.dataclass
class UpsertMusicResultGenre(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertMusicResultKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def upsert_music(
    executor: gel.AsyncIOExecutor,
    *,
    title: str,
    size: Size02,
    length: Length02,
    genre: uuid.UUID,
    album: uuid.UUID,
    keywords: list[uuid.UUID],
    track: Track02 | None = None,
    rating: Rating02,
    folder: uuid.UUID,
    path: str,
) -> UpsertMusicResult:
    return await executor.query_single(
        """\
        select upsert_music(
            title := <str>$title,
            size := <Size>$size,
            length := <Length>$length,
            genre := <Genre>$genre,
            album := <Album>$album,
            keywords := <array<uuid>>$keywords,
            track := <optional Track>$track,
            rating := <Rating>$rating,
            folder := <Folder>$folder,
            path := <str>$path
        ){
            name,
            size,
            genre: {name},
            album: {name},
            artist: {name},
            keywords: {name},
            length,
            track,
            rating,
            folders: {
                name,
                ipv4,
                username,
                path := @path
            }
        }

        # select upsert_music(
        #     title := <str>$title,
        #     size := <Size>$size,
        #     length := <Length>$length,
        #     artist := <str>$artist,
        #     genre := <str>$genre,
        #     album := <str>$album,
        #     keywords := <array<str>>$keywords,
        #     track := <optional Track>$track,
        #     rating := <Rating>$rating,
        #     path := <str>$path,
        #     folder := <str>$folder,
        #     username := <str>$username,
        #     ipv4 := <str>$ipv4
        # )
        # {
        #     name,
        #     size,
        #     genre: {name},
        #     album: {name},
        #     artist: {name},
        #     keywords: {name},
        #     length,
        #     track,
        #     rating,
        #     folders: {
        #         name,
        #         ipv4,
        #         username,
        #         path := @path
        #     }
        # }\
        """,
        title=title,
        size=size,
        length=length,
        genre=genre,
        album=album,
        keywords=keywords,
        track=track,
        rating=rating,
        folder=folder,
        path=path,
    )

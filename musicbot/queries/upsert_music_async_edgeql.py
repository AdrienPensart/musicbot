# AUTOGENERATED FROM 'musicbot/queries/upsert_music.edgeql' WITH:
#     $ edgedb-py -I musicbot-prod --dir musicbot/queries


from __future__ import annotations

import dataclasses
import uuid

import edgedb

Length = int
Length02 = int
Rating = float
Rating02 = float
Size = int
Size02 = int
Track = int
Track02 = int


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpsertMusicResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    size: Size
    genre: UpsertMusicResultGenre
    album: UpsertMusicResultAlbum
    artist: UpsertMusicResultArtist
    keywords: list[UpsertMusicResultKeywordsItem]
    length: Length
    track: Track | None
    rating: Rating
    folders: list[UpsertMusicResultFoldersItem]


@dataclasses.dataclass
class UpsertMusicResultAlbum(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertMusicResultArtist(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertMusicResultFoldersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    ipv4: str
    username: str
    path: str | None


@dataclasses.dataclass
class UpsertMusicResultGenre(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class UpsertMusicResultKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def upsert_music(
    executor: edgedb.AsyncIOExecutor,
    *,
    title: str,
    size: Size02,
    length: Length02,
    genre: uuid.UUID,
    album: uuid.UUID,
    keywords: list[uuid.UUID],
    track: Track02 | None,
    rating: Rating02,
    folder: uuid.UUID,
    path: str,
) -> UpsertMusicResult:
    return await executor.query_single(
        """\
        select (
            insert Music {
                name := <str>$title,
                size := <Size>$size,
                length := <Length>$length,
                genre := <Genre><uuid>$genre,
                album := <Album><uuid>$album,
                keywords := assert_distinct((select array_unpack(<array<Keyword>><array<uuid>>$keywords))),
                track := <optional Track>$track,
                rating := <Rating>$rating,
                folders := (
                    (<Folder><uuid>$folder) {
                        @path := <str>$path
                    }
                )
            }
            unless conflict on (.name, .album)
            else (
                update Music
                set {
                    size := <Size>$size,
                    genre := <Genre><uuid>$genre,
                    album := <Album><uuid>$album,
                    keywords := assert_distinct((select array_unpack(<array<Keyword>><array<uuid>>$keywords))),
                    length := <Length>$length,
                    track := <optional Track>$track,
                    rating := <Rating>$rating,
                    folders += (
                        (<Folder><uuid>$folder) {
                            @path := <str>$path
                        }
                    )
                }
            )
        ) {
            name,
            size,
            genre: {name},
            album: {name},
            artist: {name},
            keywords: {name},
            length,
            track,
            rating,
            folders: {
                name,
                ipv4,
                username,
                path := @path
            }
        }\
        """,
        title=title,
        size=size,
        length=length,
        genre=genre,
        album=album,
        keywords=keywords,
        track=track,
        rating=rating,
        folder=folder,
        path=path,
    )

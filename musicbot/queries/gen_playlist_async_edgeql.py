# AUTOGENERATED FROM 'musicbot/queries/gen_playlist.edgeql' WITH:
#     $ edgedb-py -I musicbot-prod --dir musicbot/queries


from __future__ import annotations

import dataclasses
import uuid

import edgedb

Length = int
Length02 = int
Limit = int
Rating = float
Rating02 = float
Size = int
Size02 = int
Track = int


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema

        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GenPlaylistResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    size: Size
    genre: GenPlaylistResultGenre
    album: GenPlaylistResultAlbum
    artist: GenPlaylistResultArtist
    keywords: list[GenPlaylistResultKeywordsItem]
    length: Length
    track: Track | None
    rating: Rating
    folders: list[GenPlaylistResultFoldersItem]


@dataclasses.dataclass
class GenPlaylistResultAlbum(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenPlaylistResultArtist(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenPlaylistResultFoldersItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    ipv4: str
    username: str
    path: str | None


@dataclasses.dataclass
class GenPlaylistResultGenre(NoPydanticValidation):
    id: uuid.UUID
    name: str


@dataclasses.dataclass
class GenPlaylistResultKeywordsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str


async def gen_playlist(
    executor: edgedb.AsyncIOExecutor,
    *,
    min_length: Length02,
    max_length: Length02,
    min_size: Size02,
    max_size: Size02,
    min_rating: Rating02,
    max_rating: Rating02,
    artist: str,
    album: str,
    genre: str,
    title: str,
    keyword: str,
    pattern: str,
    limit: Limit,
) -> list[GenPlaylistResult]:
    return await executor.query(
        """\
        select gen_playlist(
            min_length := <Length>$min_length,
            max_length := <Length>$max_length,
            min_size := <Size>$min_size,
            max_size := <Size>$max_size,
            min_rating := <Rating>$min_rating,
            max_rating := <Rating>$max_rating,
            artist := <str>$artist,
            album := <str>$album,
            genre := <str>$genre,
            title := <str>$title,
            keyword := <str>$keyword,
            pattern := <str>$pattern,
            `limit` := <`Limit`>$limit,
        ) {
            name,
            size,
            genre: {name},
            album: {name},
            artist: {name},
            keywords: {name},
            length,
            track,
            rating,
            folders: {
                name,
                ipv4,
                username,
                path := @path
            }
        }\
        """,
        min_length=min_length,
        max_length=max_length,
        min_size=min_size,
        max_size=max_size,
        min_rating=min_rating,
        max_rating=max_rating,
        artist=artist,
        album=album,
        genre=genre,
        title=title,
        keyword=keyword,
        pattern=pattern,
        limit=limit,
    )
